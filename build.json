import { cpSync, existsSync, mkdirSync } from 'fs';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function build() {
  try {
    console.log('Building project...');
    
    // Run the main build command
    await execAsync('npm run build');
    console.log('‚úÖ Build completed');
    
    // Copy attached_assets to multiple locations for compatibility
    const sources = ['attached_assets'];
    const destinations = [
      'dist/attached_assets',
      'attached_assets', // Keep in root for Vercel
      'public/attached_assets' // Alternative location
    ];
    
    for (const dest of destinations) {
      try {
        if (existsSync('attached_assets')) {
          // Ensure destination directory exists
          const destDir = dest.split('/').slice(0, -1).join('/');
          if (destDir && !existsSync(destDir)) {
            mkdirSync(destDir, { recursive: true });
          }
          
          cpSync('attached_assets', dest, { recursive: true });
          console.log(`‚úÖ Copied assets to ${dest}`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Could not copy to ${dest}:`, error.message);
      }
    }
    
    console.log('üöÄ Build process completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Build failed:', error.message);
    process.exit(1);
  }
}

build();